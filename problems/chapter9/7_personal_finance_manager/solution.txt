QUESTION: Explain how you would design a personal financial manager (like Mint.com). This system would connect to your bank accounts, analyze your spending habits, and make recommendations.

I am assuming that I am building this system from scratch and I can do it however I need to. I am assuming that this is going to work similar to Mint.com and not by some other less conventional ways. By this I mean that everything is electronic and that the information from your bank account is pulled by system without you having to import or export your bank statements to-from your bank and the system. To open support to other banks that are not a part of this service, I would have a feature that handles the import and export of a spreadsheet with a specified format. As some banks become more popular I would look into their API's or look into hooking building a relationship with them to provide the connection.

Either way I want to point out that this system could be very primitive and have this information sent as an email or physical mail. Maybe all the information is calculated by hand or on a server then reported. Of course, it would be cheaper and faster if you did this electronically, but the setup would be one time. This brings up another question: is this information provided on demand or periodically delivered?

Moving past connecting the bank, how would the data be processed? This I think is very important as financial transaction happen frequently thoughout the day, maybe not by one individual person but definitely with the population of consumers of one bank. Lets consider the case where we have an individual performing a few transactions in one day. The person is probably not going to check their spending habits too many times in the day and that the best time to check their spending habits is when the check the system for their info. Well if pulling the info is expensive this would be an issue, and the person would have to wait. This would not work for the regular user. Would a user care about his/her spending habits if the stats reflected all of their transactions up until that day? I don't think that would be a terrible cost as spending habits are based on long term transaction history. In this case, transaction history would just have to be pulled once a day for each user. This could become a problem if there were a lot of users. Let consider if the system had 1 million users. You probably don't want the system to pull all 1 million user's bank histories at one time. Well if we spread it so we do a chunk every hour we still have less than 50,000 of these requests every hour which is still not practical. Maybe it is practical, depending on the bank. Banks have to handle high load every day so this would just be an additional load. Let go back to usage, because I think this is the best case. The system can be setup so that when a user registers all their information is pulled, and then when the user goes to use the system all the transactions between when he last used the system up till that point are pulled and all the spending habits and recommendations are updated. If this was setup, you can reduce load even more by restricting the system from pulling the users bank transaction history if the system already did so for that user in the last 30 minutes or some other amount of time. The only issue I see with this is if the user hasn't used the system in over a year, but at that point I would say it's almost like re-registering for the app and the wait would not be a terrible cost as the user has low usage. Basically you want to keep returning customers happy and not worry about customers that don't use the service as often.

Now for the data. When the transaction is stored I would require the transaction id, its bank, its user, the vendor id, the date and time it took place, and the amount (negative being a purchase and positive being a sell). I would track all the vendors and the type of vendor wether they're a supermarket (food), a clothing store (apparel) or something else. With this setup we can determine their spending habits. The next thing I would setup is a form for users to fill out. This form would evaluate the users desires, that is do they want to save money, do they want to spend more clothing, do they want to set themselves up to finance something, or something else. With the spending habits and this evaluation, the service can make recommendations on how to increase or decrease spending on different areas. I think this info should only be calculated once when the service pulls the transaction history, because bhavior may change quickly but habits take more time. If a person has to wait a day to see how their spending habits have changed, I think that is fine.
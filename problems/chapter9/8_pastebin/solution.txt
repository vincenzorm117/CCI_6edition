QUESTIONS: Design a system like Pastebin, where a user can enter a piece of text and get a randomly generated URL to access it.

I am assuming that I am building this from scratch and since it uses URLs it will be accessed from the internet. Lets highlight a few important things. Pastebin lets you enter some text and it will generate a URL that can or never will expire. It also has a REST API which could lead to high amount of traffic. Pastebin has some other features, but in this case I think the URL and the experiation are the most important features to discuss in this architecture for the first iteration of ideas.

So how do we generate a random URL for some text? Lets start with a simple example of how the algorithm and the system would work. Lets say we have a function on the internet facing server program that always generates unique URLs. When the service is invoked with some text, this function would generate random URLs until it found one that doesn't exist in the database. This approach can be randomly slow as each time a URL is generated it would have to be checked with the database. Also this doesn't account for the expense of having to generate random alpha numberic characters or characters that are not prohibited in a URL.

We could make it faster by having a service that pre-generates the next unique URLs so that when a text submission is made a URL can be provided instantly. How would this work? We could have a computer or a set of computers dedicated to generating the next available URL. They would each generate a random URLs until it found a URL that has not been used yet, each computer would report this URL to a final computer that would have a list of next URLs. Every time the final computer receives a new URL it has to make sure the URL has not been used yet. Every time the final computer produces a new URL to the service in a submission it would have to update the database of used URLs. Lets consider the feature of expiring URLs. This feature depends on the database, but for now lets just assume that the expiration date is saved with the submission text and URL. Lets also assume that if the URL never expires that its expiration date is NULL. In this setup, we can have one machine be constantly scanning the database for expired URLs. This would add load to the database especially if some of these URLs are never removed. So we can separate the URLs into two databases, one that never expires and one that does. Now the database with expiring URLs would still have additional load. We could handle this approach by lazily removing entries when they are requested. The problem with that is that some URLs may be used a few times then they are not requested after they are expired, and that will lead to entries that are just taking up space that can be used. Another way we can solve this is to set fixed expiration options such as 10min, 1hr, 1day, 1week, 2weeks, 1month, 6months, or 1year like pastebin. So that these checks happen every 10min instead of every minute. This can still slow especially if there is a REST API. We can further improve this by separating each entry into its own database, one for each option including the URLs that last forever. In that case, we would just have to check the 10min database every 10min, check the 1hr database every 1hr, etc. The problem here is scalability. I think the best solution in these cases is having a database for nonexpiring URLs and one for URLs that can expire. The expiring URLs database would just be checked one to 12 times a day depending on traffic, but if an expired URL is requested it is removed from the database and nothing is returned.

Let consider the last setup with URLs with pathnames of size 10. If the random URL is limited to case sensitive alpha numeric characters then we have 26*2+10 = 62 possible characters. This gives us 62^10 = 8.392993659e17 possible URLs to generate. Since there are pre-gerated we dont have to worry about individual latency. We could argue that we cound generate these URLs sequentially that is we generate 0000000000, 0000000001, ... , aaaaaaaaa0, aaaaaaaaa1, and all the way up to ZZZZZZZZZZ assuming lower case letters come before upper case letters and numbers come before letters. The issue here is privacy, you want users accessing info someone else submitted. This issue is unavoidable as the URLs are public URLs, but by sparsely distributing URLs you can prevent this privacy issue. So you would have to randomly guess URLs until you found one that had your friends secret post. Pastebin resolves this issue definitely by providing the option of public and private URLs, but to access private URLs you have to be a member and the people you want to share with have to be members too.
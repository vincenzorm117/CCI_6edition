QUESTION: A large eCommerce company wishes to list the best-selling products, overall and by the #13th best-selling product under "Sports Equipment" and the #24th best-selling product under "Safety". Describe how you would design this system.

First, what am I building? If the company is a large eCommerce company, I am assuming that they already have an infrastructure and I am simply hooking into it. It might be the case, that there infrastructure has to be modified to accomadate their wishes. I'll examine each of these cases. Also am I focused on designing the data structures, database schemas and algorithms associated with this problem or should I assume they are not a problem and its mainly a problem of how or when to run these operations.

First lets examine the case where I am hooking into their infrastructure instead of modifying. In this case, I would need to monitor purchases, product updates, product creations, and product removals. Since I am assuming that infrastructure is full fleshed out, I am assuming triggers for these events exist and can be hooked into. So I would setup an outside service that hooks into these events for this large eCommerce platform and the data that will primaryly be tracked is exsting products, each product's purchase count, and each products category list. This service would have to be initialized with the companies data first in order to udpate accordingly; this setup would be a one time event where all of the product and categories are pulled and sorted. The one time initialization I don't think poses any issues apart from maybe taking some time if there are several gigabytes of eCommerce data stored on this companies databases, so I am going to move past it and focus on the ranking once everything is setup.

Now lets assume everything is up, and there are events being triggered updating the service. Let's consider the case that when an event is triggered everything on the service is updated. If updating is occuring immediately then it could be overloaded and some updates might be missed. Consider Amazon, they have received 26.5 Million purchases in one day, thats about 306 purchases every second. In a small shop with less than 1000 products and categories this would not be much of an issue, but considering Amazon immediate updates might not be ideal. 

One way we can deal with this is by running updates a time when traffic is lowest. Lets say that's after midnight for practical purposes. These updates can occur a few ways. One is that we scan all of the databases, determine the differences, and report the rankings. This operation would be expensive and might create traffic issues for the company, so if after hours traffic is not a concern then this solution might work. In the case of Amazon, they operate internationally so after hours calculations like that would not work, and this solution would be more tailored to regionally operated eCommerce businesses. 

What if we queue up the events somewhere it's not expensive and send them during low traffic hours? Where would that happen? One place might be to modify the company's infrastructure to accomadate that. One way this could happen would be to have a machine on their server that receives these events and then have the service peridically pull from it like a message queue. This raises the concern that during high traffic, the machines queue could be overflowed and the machine could run out of memory. Consider the Amazon example. That would most defenitely fill up any computer.

Lets consider the case that these events are processed periodically instead of after hours. We could have computers consume those queues faster or we could have more computers. Having computers consume the queues faster would scale well, but it might raise the price and increase load on the queue computer as it is not only providing a service to the companies architecture by saving queuing events but also by responding to the consuming computers. In the case where there are more than one computer for the queues, you could argue that the data might be inconsistent or inaccurate as maybe some events are not processed in the proper order. If we stay at processing events after hours, this issue can be resolved by simply processing events that are less than some hours old, lets say 12 hours for example. So that puts the attention on the queues to make sure that they're data is not more than 12 hours old, and I don't think this would be an issue until the processing time is down to the minutes. Either should not be an issue unless one of the computers stops functioning. How do we handle if a computer is down?

If this is a large eCommerce company that has been running for years, there is a significant probability that a hard drive will stop functioning under continual use. This is where the issue can get out of scope and I think the easy solution to this is to do another initialization.